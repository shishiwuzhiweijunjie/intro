generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model GachaHistory {
  id        Int      @id @default(autoincrement())
  userId    Int
  itemName  String
  rarity    Int
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model GachaItems {
  id       Int     @id @default(autoincrement())
  itemName String
  rarity   Int     @db.SmallInt
  isRateUp Boolean @default(false)
  weight   Int
  isCharacter Boolean @default(false)

  UserCharacters UserCharacters[]
}

model GachaPity {
  userId          Int    @id
  fiveStarCounter Int    @default(0)
  fourStarCounter Int    @default(0)
  guaranteeStatus String @default("none")
  user            User   @relation(fields: [userId], references: [id])
}

model User {
  id           Int            @id @default(autoincrement())
  username     String         @unique
  email        String         @unique
  password     String
  createdAt    DateTime       @default(now())
  gachaHistory GachaHistory[]
  gachaPity    GachaPity?

  orders        Order[]
  UserCharacters UserCharacters[]
}

model UserCharacters {
  id          Int      @id @default(autoincrement())
  userId      Int
  characterId Int
  health      Float    @default(100.0)
  attack      Float    @default(10.0)
  defense     Float    @default(5.0)
  critRate    Float    @default(5.0)
  critDamage  Float    @default(50.0)
  level       Int      @default(1)
  user        User     @relation(fields: [userId], references: [id])
  character   GachaItems @relation(fields: [characterId], references: [id])
}

// schema.prisma 新增模型
model Product {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String
  price       Float
  stock       Int
  imageUrl    String?
  createdAt   DateTime @default(now())
  orderItems  OrderItem[]
}

model Order {
  id          Int      @id @default(autoincrement())
  userId      Int
  totalAmount Float
  status      String   @default("pending")
  createdAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id])
  items       OrderItem[]
  payment     Payment?
}

model OrderItem {
  id        Int     @id @default(autoincrement())
  orderId   Int
  productId Int
  quantity  Int
  price     Float
  order     Order   @relation(fields: [orderId], references: [id])
  product   Product @relation(fields: [productId], references: [id])
}

model Payment {
  id          Int      @id @default(autoincrement())
  orderId     Int      @unique
  amount      Float
  method      String   // wechat/alipay/stripe
  status      String   @default("pending")
  createdAt   DateTime @default(now())
  order       Order    @relation(fields: [orderId], references: [id])
}